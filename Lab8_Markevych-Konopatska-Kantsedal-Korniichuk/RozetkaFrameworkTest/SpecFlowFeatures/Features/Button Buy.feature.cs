// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowFeatures.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ButtonBuyFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "Button Buy.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Button Buy", "\tIn order to buy it later\r\n\tAs a customer\r\n\tI want to add the product that I chos" +
                    "e to the cart", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Button Buy")))
            {
                global::SpecFlowFeatures.Features.ButtonBuyFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void TheNameOfTheShownProductIsTheSameAsTheNameOfTheProductWeChose(string quantity, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "positive",
                    "state",
                    "of",
                    "cart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The name of the shown product is the same as the name of the product we chose", @__tags);
#line 9
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given(string.Format("Product is in the cart with quantity {0}", quantity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.Then("The name of the shown product is the same as the name of the product we chose", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The name of the shown product is the same as the name of the product we chose: 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Button Buy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("state")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("of")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("cart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:quantity", "3")]
        public virtual void TheNameOfTheShownProductIsTheSameAsTheNameOfTheProductWeChose_3()
        {
#line 9
this.TheNameOfTheShownProductIsTheSameAsTheNameOfTheProductWeChose("3", ((string[])(null)));
#line hidden
        }
        
        public virtual void ThePriceOfTheShownProductIsTheSameAsThePriceOfTheProductWeChose(string quantity, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "positive",
                    "state_of_cart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The price of the shown product is the same as the price of the product we chose", @__tags);
#line 20
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given(string.Format("Product is in the cart with quantity {0}", quantity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.Then("The price of the shown product is the same as the price of the product we chose", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The price of the shown product is the same as the price of the product we chose: " +
            "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Button Buy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("state_of_cart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:quantity", "3")]
        public virtual void ThePriceOfTheShownProductIsTheSameAsThePriceOfTheProductWeChose_3()
        {
#line 20
this.ThePriceOfTheShownProductIsTheSameAsThePriceOfTheProductWeChose("3", ((string[])(null)));
#line hidden
        }
        
        public virtual void TheSellerPictureOfTheShownProductIsTheSameAsTheSellerPictureOfTheProductWeChose(string quantity, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "positive",
                    "state_of_cart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The seller picture of the shown product is the same as the seller picture of the " +
                    "product we chose", @__tags);
#line 32
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given(string.Format("Product is in the cart with quantity {0}", quantity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
 testRunner.Then("The seller picture of the shown product is the same as the seller picture of the " +
                    "product we chose", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The seller picture of the shown product is the same as the seller picture of the " +
            "product we chose: 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Button Buy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("positive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("state_of_cart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:quantity", "3")]
        public virtual void TheSellerPictureOfTheShownProductIsTheSameAsTheSellerPictureOfTheProductWeChose_3()
        {
#line 32
this.TheSellerPictureOfTheShownProductIsTheSameAsTheSellerPictureOfTheProductWeChose("3", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
